name: ci/cd

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  # PR's only
  validateProposal:
    name: Validate proposal
    if: startsWith(github.ref, 'refs/pull/')
    runs-on: ubuntu_latest
    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # Ensure to have working git diff against master
      - run: |
          git checkout -b pr
          git fetch --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master
          git checkout master
          git checkout pr

      # Ensure to cache ~/.npm and node_modules
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ github.ref }}-${{ hashFiles('package.json') }}
          restore-keys: |
            npm-${{ runner.os }}-${{ github.ref }}-
            npm-${{ runner.os }}-refs/heads/master-
      - uses: actions/cache@v1
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ github.ref }}-${{ hashFiles('package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-${{ github.ref }}-
            node_modules-${{ runner.os }}-refs/heads/master-

      # Setup Node.js & npm
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - run: |
          npm update --no-save
          npm update --save-dev --no-save
          npm run prettier-check:updated
          npm run lint:updated

  # master only
  tagOnNewVersion:
    name: Tag on new version
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      GET_LAST_VALIDATED_COMMIT_HASH_URL: ${{ secrets.GET_LAST_VALIDATED_COMMIT_HASH_URL }}
      PUT_LAST_VALIDATED_COMMIT_HASH_URL: ${{ secrets.PUT_LAST_VALIDATED_COMMIT_HASH_URL }}
    steps:
      # Checkout repository
      - uses: actions/checkout@v2
        with:
          # Ensure to have complete history of commits pushed with given push operation
          # It's loose and imperfect assumption that no more than 30 commits will be pushed at once
          fetch-depth: 30

      # Resolve last validated commit hash (and store current as last validated)
      # Note: Last validated hash is needed resolve pushed commits range
      - run: |
          curl -f "$GET_LAST_VALIDATED_COMMIT_HASH_URL" -o /home/runner/last-validated-commit-hash || :
          curl -v -X PUT -H "User-Agent:" -H "Accept:" -H "Content-Type:" -d "$GITHUB_SHA" "$PUT_LAST_VALIDATED_COMMIT_HASH_URL" 
          LAST_VALIDATED_COMMIT_HASH=`cat /home/runner/last-validated-commit-hash` || :
          if [ -n "$LAST_VALIDATED_COMMIT_HASH" ];
          then
            NEW_VERSION=`git diff $LAST_VALIDATED_COMMIT_HASH package.json | grep '"version": "' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
            if [ -n "$NEW_VERSION" ];
            then
              git tag v$NEW_VERSION
              git push --tags
            fi
          fi

  # Version tags only
  publishNewVersion:
    name: Publish new version
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # Setup Node.js & npm
      - uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org

      # Publish new version
      - run: npm publish
